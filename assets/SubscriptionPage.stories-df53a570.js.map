{"version":3,"file":"SubscriptionPage.stories-df53a570.js","sources":["../../src/components/SubscriptionPage/ForumTopic.tsx","../../src/components/SubscriptionPage/ThreadTopic.tsx","../../src/components/SubscriptionPage/SubscriptionItem.tsx","../../src/components/SubscriptionPage/SubscriptionPage.tsx"],"sourcesContent":["import React from 'react'\nimport {\n  Subscription,\n  SubscriptionObjectType,\n} from '@sage-bionetworks/synapse-types'\nimport Topic from './Topic'\nimport { useGetForumMetadata } from '../../synapse-queries/forum/useForum'\nimport { useGetEntity } from '../../synapse-queries'\nimport { useSubscription } from '../../synapse-queries/subscription/useSubscription'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../utils/functions/getEndpoint'\n\nexport type SubscriptionItemProps = {\n  subscription: Subscription\n}\n\nexport default function ForumTopic(props: SubscriptionItemProps) {\n  const { subscription } = props\n\n  const { data: forum } = useGetForumMetadata(subscription.objectId)\n  const { data: project } = useGetEntity(forum?.projectId!, undefined, {\n    enabled: !!forum,\n  })\n  const { isSubscribed, isLoading, toggleSubscribed } = useSubscription(\n    subscription.objectId,\n    SubscriptionObjectType.FORUM,\n  )\n\n  let href: string | undefined\n  if (forum) {\n    href = `${getEndpoint(BackendDestinationEnum.PORTAL_ENDPOINT)}#!Synapse:${\n      forum.projectId\n    }/discussion`\n  }\n\n  return (\n    <Topic\n      isLoading={isLoading}\n      isSubscribed={isSubscribed}\n      icon={'dashboard'}\n      name={project?.name}\n      nameHref={href}\n      onToggleSubscribe={toggleSubscribed}\n    />\n  )\n}\n","import React from 'react'\nimport {\n  Subscription,\n  SubscriptionObjectType,\n} from '@sage-bionetworks/synapse-types'\nimport { useSubscription } from '../../synapse-queries/subscription/useSubscription'\nimport Topic from './Topic'\nimport { useGetThread } from '../../synapse-queries/forum/useThread'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../utils/functions/getEndpoint'\n\nexport type SubscriptionItemProps = {\n  subscription: Subscription\n}\n\nexport default function SubscriptionItem(props: SubscriptionItemProps) {\n  const { subscription } = props\n\n  const { threadData } = useGetThread(subscription.objectId)\n  const { isSubscribed, isLoading, toggleSubscribed } = useSubscription(\n    subscription.objectId,\n    SubscriptionObjectType.THREAD,\n  )\n\n  let href: string | undefined\n  if (threadData) {\n    href = `${getEndpoint(BackendDestinationEnum.PORTAL_ENDPOINT)}#!Synapse:${\n      threadData.projectId\n    }/discussion/threadId=${subscription.objectId}`\n  }\n\n  return (\n    <Topic\n      isLoading={isLoading}\n      isSubscribed={isSubscribed}\n      icon={'discussion'}\n      name={threadData?.title}\n      nameHref={href}\n      onToggleSubscribe={toggleSubscribed}\n    />\n  )\n}\n","import React from 'react'\nimport {\n  Subscription,\n  SubscriptionObjectType,\n} from '@sage-bionetworks/synapse-types'\nimport ForumTopic from './ForumTopic'\nimport ThreadTopic from './ThreadTopic'\n\nexport type SubscriptionItemProps = {\n  subscription: Subscription\n}\n\n/**\n * Simple discriminator component that maps a {@link Subscription} rendered on the {@link SubscriptionPage} to\n * a {@link Topic} component\n * @param props\n * @constructor\n */\nexport default function SubscriptionItem(props: SubscriptionItemProps) {\n  const { subscription } = props\n\n  switch (subscription.objectType) {\n    case SubscriptionObjectType.FORUM:\n      return <ForumTopic subscription={subscription} />\n    case SubscriptionObjectType.THREAD:\n      return <ThreadTopic subscription={subscription} />\n    default:\n      console.warn(\n        `Subscription type ${props.subscription.objectType} not supported in UI`,\n      )\n      return <></>\n  }\n}\n","import React, { useId, useState } from 'react'\nimport { useGetAllSubscriptions } from '../../synapse-queries/subscription/useSubscription'\nimport {\n  SortByType as SubscriptionSortField,\n  SortDirection,\n  SubscriptionObjectType,\n} from '@sage-bionetworks/synapse-types'\nimport SubscriptionItem from './SubscriptionItem'\nimport { Box, Button, Stack, Tab, Tabs } from '@mui/material'\nimport DropdownSelect from '../DropdownSelect'\n\ntype SortOption = { value: SortDirection; label: string }\n\nconst sortOptions: SortOption[] = [\n  { value: 'ASC', label: 'Date Posted' },\n  { value: 'DESC', label: 'Most Recent' },\n]\n\nexport default function SubscriptionPage() {\n  const [objectType, setObjectType] = useState<SubscriptionObjectType>(\n    SubscriptionObjectType.FORUM,\n  )\n  const [sortDirection, setSortDirection] = useState<SortOption>(sortOptions[0])\n\n  const instanceSpecificQueryKey = useId()\n\n  const currentFilter = {\n    objectType: objectType,\n    sortBy: SubscriptionSortField.CREATED_ON,\n    sortDirection: sortDirection.value,\n  }\n\n  const { data, hasNextPage, isFetchingNextPage, fetchNextPage } =\n    useGetAllSubscriptions(\n      currentFilter,\n      // Since the user may edit their subscriptions on this page, set staleTime to infinity to prevent re-fetching while editing\n      { staleTime: Infinity },\n      // Override the query key with a unique ID, because we don't want changes to invalidate this list while it's being used\n      [`subscriptionPageFetch_${instanceSpecificQueryKey}`, currentFilter],\n    )\n\n  return (\n    <>\n      <Box sx={{ float: 'right' }}>\n        <DropdownSelect\n          variant={'outlined'}\n          options={sortOptions.map(option => option.label)}\n          selectedIndex={sortOptions.findIndex(\n            option => option.value === sortDirection.value,\n          )}\n          setSelectedIndex={index => setSortDirection(sortOptions[index])}\n        />\n      </Box>\n\n      <Tabs\n        sx={{ mb: 3 }}\n        value={objectType}\n        onChange={(\n          event: React.SyntheticEvent,\n          newValue: SubscriptionObjectType,\n        ) => {\n          event.stopPropagation()\n          setObjectType(newValue)\n        }}\n        textColor=\"secondary\"\n        indicatorColor=\"secondary\"\n      >\n        <Tab value={SubscriptionObjectType.FORUM} label={'Project Forums'} />\n        <Tab value={SubscriptionObjectType.THREAD} label={'Threads'} />\n      </Tabs>\n      <Stack gap={0.5}>\n        {data?.pages.map(subscription => (\n          <SubscriptionItem\n            key={subscription.subscriptionId}\n            subscription={subscription}\n          />\n        ))}\n      </Stack>\n\n      {hasNextPage && (\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            fetchNextPage()\n          }}\n          disabled={isFetchingNextPage}\n          sx={{ mt: 6 }}\n        >\n          {isFetchingNextPage ? 'Loading...' : 'Load More'}\n        </Button>\n      )}\n    </>\n  )\n}\n"],"names":["ForumTopic","props","subscription","forum","useGetForumMetadata","project","useGetEntity","isSubscribed","isLoading","toggleSubscribed","useSubscription","SubscriptionObjectType","href","getEndpoint","BackendDestinationEnum","jsx","Topic","SubscriptionItem","threadData","useGetThread","ThreadTopic","Fragment","sortOptions","SubscriptionPage","objectType","setObjectType","useState","sortDirection","setSortDirection","instanceSpecificQueryKey","useId","currentFilter","SubscriptionSortField","data","hasNextPage","isFetchingNextPage","fetchNextPage","useGetAllSubscriptions","jsxs","Box","DropdownSelect","option","index","Tabs","event","newValue","Tab","Stack","Button"],"mappings":"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"}